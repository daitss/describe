var search_data = {"index":{"searchIndex":["ascii","audio","bitstreamobject","fdaformat","fileformat","fileobject","format2validator","formatbase","formaterror","formatpool","formattree","image","inhibitor","jp2","jar","jpeg","object","pdf","pdfa","pronomformat","premis","rdroid","rjhove","rxml","registry","result","tiff","utf8","validator","<=>()","==()","apply_xsl()","calculatefixity()","clear()","clear()","clear()","clear()","config_file()","delta_stats()","describe()","eql?()","extract()","extractall()","extractall()","find()","findformat()","findformat()","find_by_lookup()","find_by_rid()","find_puid()","fixmix()","getbranches()","getvalidator()","getvalidator()","hash()","identify()","identify()","import_from_jars()","isvalid()","isvalid()","load_jars()","max_pdf_bitstreams=()","memory_stats()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse_report()","resolveformats()","retrievefileproperties()","retrievefileproperties()","set()","show_stats()","trimformatlist()","validator=()","xsl_file()"],"longSearchIndex":["ascii","audio","bitstreamobject","fdaformat","fileformat","fileobject","format2validator","formatbase","formaterror","formatpool","formattree","image","inhibitor","jp2","jar","jpeg","object","pdf","pdfa","pronomformat","premis","rdroid","rjhove","rxml","registry","result","tiff","utf8","validator","validator#<=>()","fileformat#==()","formatbase#apply_xsl()","fileobject#calculatefixity()","fileobject#clear()","format2validator#clear()","premis#clear()","result#clear()","object#config_file()","object#delta_stats()","formatpool#describe()","fileformat#eql?()","formatbase#extract()","formatpool#extractall()","rjhove#extractall()","fdaformat#find()","formatpool#findformat()","rjhove#findformat()","registry#find_by_lookup()","format2validator#find_by_rid()","pronomformat#find_puid()","image#fixmix()","formattree#getbranches()","formatpool#getvalidator()","rjhove#getvalidator()","fileformat#hash()","formatpool#identify()","rdroid#identify()","jar::import_from_jars()","formatpool#isvalid()","rjhove#isvalid()","jar::load_jars()","pdf::max_pdf_bitstreams=()","object#memory_stats()","fdaformat::new()","fileobject::new()","format2validator::new()","formatbase::new()","formatpool::new()","formattree::new()","pdf::new()","pdfa::new()","pronomformat::new()","premis::new()","rdroid::new()","rjhove::new()","registry::new()","result::new()","validator::new()","ascii#parse()","audio#parse()","formatbase#parse()","image#parse()","jp2#parse()","jpeg#parse()","pdf#parse()","pdfa#parse()","rxml#parse()","tiff#parse()","utf8#parse()","pdfa#parse_report()","fileobject#resolveformats()","formatpool#retrievefileproperties()","rjhove#retrievefileproperties()","registry#set()","object#show_stats()","fileobject#trimformatlist()","pdfa::validator=()","object#xsl_file()"],"info":[["ASCII","","ASCII.html","",""],["Audio","","Audio.html","",""],["BitstreamObject","","BitstreamObject.html","","<p>extracted metadata of a bitstream object\n"],["FDAFormat","","FDAFormat.html","",""],["FileFormat","","FileFormat.html","","<p>metadata related to format\n"],["FileObject","","FileObject.html","","<p>extracted metadata of a file object\n"],["Format2Validator","","Format2Validator.html","","<p>Format2Validator class performs validator lookup by registry id\n"],["FormatBase","","FormatBase.html","",""],["FormatError","","FormatError.html","",""],["FormatPool","","FormatPool.html","",""],["FormatTree","","FormatTree.html","",""],["Image","","Image.html","",""],["Inhibitor","","Inhibitor.html","","<p>metadata related to inhibitor\n"],["JP2","","JP2.html","",""],["Jar","","Jar.html","",""],["Jpeg","","Jpeg.html","",""],["Object","","Object.html","",""],["PDF","","PDF.html","",""],["PDFA","","PDFA.html","",""],["PRONOMFormat","","PRONOMFormat.html","",""],["Premis","","Premis.html","","<p>PREMIS metadata container\n"],["RDroid","","RDroid.html","",""],["RJhove","","RJhove.html","",""],["RXML","","RXML.html","",""],["Registry","","Registry.html","","<p>Registry class performs registry identifier lookup by a defined name string\n"],["Result","","Result.html","",""],["Tiff","","Tiff.html","",""],["UTF8","","UTF8.html","",""],["Validator","","Validator.html","",""],["<=>","Validator","Validator.html#method-i-3C-3D-3E","(other)","<p>sort the validators by priority\n"],["==","FileFormat","FileFormat.html#method-i-3D-3D","(other)","<p>returns true if other is the same format\n"],["apply_xsl","FormatBase","FormatBase.html#method-i-apply_xsl","(xsl_file_name)","<p>apply stylesheet into an xml document\n"],["calculateFixity","FileObject","FileObject.html#method-i-calculateFixity","()","<p>calculate md5 and sha1 for the fileObject\n"],["clear","FileObject","FileObject.html#method-i-clear","()",""],["clear","Format2Validator","Format2Validator.html#method-i-clear","()",""],["clear","Premis","Premis.html#method-i-clear","()",""],["clear","Result","Result.html#method-i-clear","()",""],["config_file","Object","Object.html#method-i-config_file","(name)",""],["delta_stats","Object","Object.html#method-i-delta_stats","()",""],["describe","FormatPool","FormatPool.html#method-i-describe","(input, uri, originalName)","<p>perform format description and generate the result in premis\n"],["eql?","FileFormat","FileFormat.html#method-i-eql-3F","(other)",""],["extract","FormatBase","FormatBase.html#method-i-extract","(input, uri)",""],["extractAll","FormatPool","FormatPool.html#method-i-extractAll","(input, formats, uri, result)","<p>given a list of tentative format id, extract technical metadata of the\ninput file\n"],["extractAll","RJhove","RJhove.html#method-i-extractAll","(input, formats, uri, result)","<p>given a list of tentative format id, extract technical metadata of the\ninput file\n"],["find","FDAFormat","FDAFormat.html#method-i-find","(formatName)",""],["findFormat","FormatPool","FormatPool.html#method-i-findFormat","(puid)","<p>given a puid, find the registry format information\n"],["findFormat","RJhove","RJhove.html#method-i-findFormat","(puid)","<p>given a puid, find the registry format information\n"],["find_by_lookup","Registry","Registry.html#method-i-find_by_lookup","(lookup)","<p>find format registry entry by using the lookup string\n"],["find_by_rid","Format2Validator","Format2Validator.html#method-i-find_by_rid","(rid)",""],["find_puid","PRONOMFormat","PRONOMFormat.html#method-i-find_puid","(puid)",""],["fixMix","Image","Image.html#method-i-fixMix","(mixstream)","<p>fix malformed mix metadata, example include non-printable characters in\ndateTimeCreated\n"],["getBranches","FormatTree","FormatTree.html#method-i-getBranches","(format)","<p>retrieve all branch formats\n"],["getValidator","FormatPool","FormatPool.html#method-i-getValidator","(formats)","<p>get the list of validators that may be used to validate the list of\nidentified formats\n"],["getValidator","RJhove","RJhove.html#method-i-getValidator","(formats)","<p>get the list of validators that may be used to validate the list of\nidentified formats\n"],["hash","FileFormat","FileFormat.html#method-i-hash","()",""],["identify","FormatPool","FormatPool.html#method-i-identify","(input)","<p>perform format identification on file {input}, using DROID\n"],["identify","RDroid","RDroid.html#method-i-identify","(input)",""],["import_from_jars","Jar","Jar.html#method-c-import_from_jars","(name)",""],["isValid","FormatPool","FormatPool.html#method-i-isValid","(status)","<p>is the return status from the validator indicates that the file is valid?\n"],["isValid","RJhove","RJhove.html#method-i-isValid","(status)","<p>is the return status from the validator indicates that the file is valid?\n"],["load_jars","Jar","Jar.html#method-c-load_jars","()",""],["max_pdf_bitstreams=","PDF","PDF.html#method-c-max_pdf_bitstreams-3D","(num)",""],["memory_stats","Object","Object.html#method-i-memory_stats","(show = true)",""],["new","FDAFormat","FDAFormat.html#method-c-new","()",""],["new","FileObject","FileObject.html#method-c-new","()",""],["new","Format2Validator","Format2Validator.html#method-c-new","()",""],["new","FormatBase","FormatBase.html#method-c-new","(jhoveModule)",""],["new","FormatPool","FormatPool.html#method-c-new","()",""],["new","FormatTree","FormatTree.html#method-c-new","()",""],["new","PDF","PDF.html#method-c-new","(jhoveModule)",""],["new","PDFA","PDFA.html#method-c-new","(jhoveModule)",""],["new","PRONOMFormat","PRONOMFormat.html#method-c-new","()",""],["new","Premis","Premis.html#method-c-new","()",""],["new","RDroid","RDroid.html#method-c-new","()",""],["new","RJhove","RJhove.html#method-c-new","()",""],["new","Registry","Registry.html#method-c-new","()",""],["new","Result","Result.html#method-c-new","()",""],["new","Validator","Validator.html#method-c-new","(doc, base)",""],["parse","ASCII","ASCII.html#method-i-parse","(xml)",""],["parse","Audio","Audio.html#method-i-parse","(xml)",""],["parse","FormatBase","FormatBase.html#method-i-parse","(doc)",""],["parse","Image","Image.html#method-i-parse","(xml)",""],["parse","JP2","JP2.html#method-i-parse","(xml)",""],["parse","Jpeg","Jpeg.html#method-i-parse","(xml)",""],["parse","PDF","PDF.html#method-i-parse","(xml)",""],["parse","PDFA","PDFA.html#method-i-parse","(xml)","<p>perform the pdf/a specific format validation and extract the\nformat-specific metadata\n"],["parse","RXML","RXML.html#method-i-parse","(xml)",""],["parse","Tiff","Tiff.html#method-i-parse","(xml)",""],["parse","UTF8","UTF8.html#method-i-parse","(xml)",""],["parse_report","PDFA","PDFA.html#method-i-parse_report","(report_file)","<p>parse and record the validation errors in report generated from pdf/a\nvalidation\n"],["resolveFormats","FileObject","FileObject.html#method-i-resolveFormats","()","<p>make sure all formats have associated format registry id.  Otherwise, look\nup the fda format registry …\n"],["retrieveFileProperties","FormatPool","FormatPool.html#method-i-retrieveFileProperties","(input, formats, uri)","<p>retrieve general file format properties such as size and format information\n"],["retrieveFileProperties","RJhove","RJhove.html#method-i-retrieveFileProperties","(input, formats, uri)","<p>retrieve general file format properties such as size and format information\n"],["set","Registry","Registry.html#method-i-set","(baseURI)",""],["show_stats","Object","Object.html#method-i-show_stats","(stats)",""],["trimFormatList","FileObject","FileObject.html#method-i-trimFormatList","()","<p>trim down the list of identified formats to the most specific.  Ex., if\nboth PDF/A and PDF/1.4 are listed …\n"],["validator=","PDFA","PDFA.html#method-c-validator-3D","(validator)",""],["xsl_file","Object","Object.html#method-i-xsl_file","(name)",""]]}}